{"version":3,"sources":["components/Header.js","components/Task.js","components/AddTask.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["Header","date","Date","day","getDay","monthDay","getDate","month","getMonth","className","Task","onToggleComplete","task","onRemove","changeHandler","useCallback","removeHandler","onChange","checked","completed","style","textDecoration","text","type","onClick","AddTask","placeholder","onKeyPress","ev","target","value","trim","key","useTasks","useState","data","localStorage","getItem","JSON","parse","getTasks","tasks","setTasks","setItem","stringify","saveTasks","App","newTasks","map","index","splice","removeTaskHandler","completedTaskHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLA8BeA,EA5BA,WACb,IAeIC,EAAO,IAAIC,KACXC,EAhBS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAgBzCF,EAAKG,UAChBC,EAAWJ,EAAKK,UAChBC,EAjBW,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAKiBN,EAAKO,YACxB,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,SAAd,UACA,uBAAGA,UAAU,QAAQN,EAAM,IAAME,EAAW,IAAME,K,kBCSzCG,EA9BF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChCC,EAAgBC,uBAAY,WAC5BJ,GACFA,EAAiBC,KAElB,CAACA,EAAMD,IAEJK,EAAgBD,uBAAY,WAC5BF,GACFA,EAASD,KAEV,CAACA,EAAMC,IAEV,OACE,yBAAKJ,UAAU,kBACb,kBAAC,IAAD,CAAUQ,SAAUH,EAAeI,QAASN,EAAKO,YACjD,yBAAKV,UAAU,QACb,wBACEA,UAAU,mBACVW,MAAO,CAAEC,eAAgBT,EAAKO,UAAY,eAAiB,KAE1DP,EAAKU,OAIV,kBAAC,IAAD,CAAMC,KAAK,SAASC,QAASR,MCLpBS,EAtBC,SAAC,GAAkB,IAAhBR,EAAe,EAAfA,SAWjB,OACE,6BACE,2BACES,YAAY,kBACZjB,UAAU,WACVkB,WAfkB,SAAAC,GAEO,KAA3BA,EAAGC,OAAOC,MAAMC,QACL,UAAXH,EAAGI,KACiB,oBAAbf,IAEPA,EAASW,EAAGC,OAAOC,OACnBF,EAAGC,OAAOC,MAAQ,SCMjB,SAASG,IAAY,IAAD,EACCC,mBAT5B,WACE,IAAMC,EAAOC,aAAaC,QAPR,SAQlB,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,GAI4BK,IADV,mBAClBC,EADkB,KACXC,EADW,KAMzB,MAAO,CAACD,EAJY,SAAAA,GAClBC,EAASD,GAfb,SAAmBA,GACjBL,aAAaO,QAHK,QAGgBL,KAAKM,UAAUH,IAe/CI,CAAUJ,KCZd,IAsCeK,EAtCH,WAAO,IAAD,EACUb,IADV,mBACTQ,EADS,KACFC,EADE,KAoBhB,OACE,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASzB,SApBU,SAAAK,GACrB,IAAMyB,EAAQ,sBAAON,GAAP,CAAc,CAAEnB,OAAMH,WAAW,KAC/CuB,EAASK,MAmBP,iCACGN,EAAMO,KAAI,SAACpC,EAAMqC,GAAP,OACT,kBAAC,EAAD,CACErC,KAAMA,EACNoB,IAAKiB,EACLpC,SAAU,kBArBM,SAAAoC,GACxB,IAAMF,EAAQ,YAAON,GACrBM,EAASG,OAAOD,EAAO,GACvBP,EAASK,GAkBeI,CAAkBF,IAClCtC,iBAAkB,kBAhBC,SAAAsC,GAC3B,IAAMF,EAAQ,YAAON,GACrBM,EAASE,GAAO9B,WAAa4B,EAASE,GAAO9B,UAC7CuB,EAASK,GAauBK,CAAqBH,YC1BrCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ccde64a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ];\r\n  let date = new Date();\r\n  let day = days[date.getDay()];\r\n  let monthDay = date.getDate();\r\n  let month = months[date.getMonth()];\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"title\">My Day</h1>\r\n      <p className=\"date\">{day + ' ' + monthDay + ' ' + month}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useCallback } from 'react';\r\n\r\nimport { Checkbox, Icon } from 'antd';\r\n\r\nconst Task = ({ onToggleComplete, task, onRemove }) => {\r\n  const changeHandler = useCallback(() => {\r\n    if (onToggleComplete) {\r\n      onToggleComplete(task);\r\n    }\r\n  }, [task, onToggleComplete]);\r\n\r\n  const removeHandler = useCallback(() => {\r\n    if (onRemove) {\r\n      onRemove(task);\r\n    }\r\n  }, [task, onRemove]);\r\n\r\n  return (\r\n    <div className=\"task-container\">\r\n      <Checkbox onChange={changeHandler} checked={task.completed} />\r\n      <div className=\"task\">\r\n        <h4\r\n          className=\"task-description\"\r\n          style={{ textDecoration: task.completed ? 'line-through' : '' }}\r\n        >\r\n          {task.text}\r\n        </h4>\r\n      </div>\r\n\r\n      <Icon type=\"delete\" onClick={removeHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\n\r\nconst AddTask = ({ onChange }) => {\r\n  const keyPressHandler = ev => {\r\n    if (\r\n      ev.target.value.trim() !== '' &&\r\n      ev.key === 'Enter' &&\r\n      typeof onChange === 'function'\r\n    ) {\r\n      onChange(ev.target.value);\r\n      ev.target.value = '';\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        placeholder=\"Add new task...\"\r\n        className=\"add-task\"\r\n        onKeyPress={keyPressHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import { useState } from 'react';\r\n\r\nconst STORAGE_KEY = 'tasks';\r\n\r\nfunction saveTasks(tasks) {\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));\r\n}\r\n\r\nfunction getTasks() {\r\n  const data = localStorage.getItem(STORAGE_KEY);\r\n  if (data) {\r\n    return JSON.parse(data);\r\n  }\r\n  return [];\r\n}\r\n\r\nexport function useTasks() {\r\n  const [tasks, setTasks] = useState(getTasks());\r\n  const updateTasks = tasks => {\r\n    setTasks(tasks);\r\n    saveTasks(tasks);\r\n  };\r\n  return [tasks, updateTasks];\r\n}\r\n","import React from 'react';\r\n\r\nimport Header from './components/Header';\r\nimport Task from './components/Task';\r\nimport AddTask from './components/AddTask';\r\n\r\nimport { useTasks } from './hooks';\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useTasks();\r\n\r\n  const addTaskHandler = text => {\r\n    const newTasks = [...tasks, { text, completed: false }];\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const removeTaskHandler = index => {\r\n    const newTasks = [...tasks];\r\n    newTasks.splice(index, 1);\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const completedTaskHandler = index => {\r\n    const newTasks = [...tasks];\r\n    newTasks[index].completed = !newTasks[index].completed;\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Header />\r\n      <AddTask onChange={addTaskHandler} />\r\n      <section>\r\n        {tasks.map((task, index) => (\r\n          <Task\r\n            task={task}\r\n            key={index}\r\n            onRemove={() => removeTaskHandler(index)}\r\n            onToggleComplete={() => completedTaskHandler(index)}\r\n          />\r\n        ))}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}